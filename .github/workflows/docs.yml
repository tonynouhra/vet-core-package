name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
  workflow_dispatch:

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Check for broken links
      run: |
        cd docs
        make linkcheck

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  validate-examples:
    name: Validate Documentation Examples
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_vet_core
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Validate README examples
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        # Extract and run Python code blocks from README
        python -c "
        import re
        import subprocess
        import tempfile
        
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Find Python code blocks
        code_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
        
        for i, code in enumerate(code_blocks):
            if 'import vet_core' in code or 'from vet_core' in code:
                print(f'Validating code block {i+1}...')
                with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                    f.write(code)
                    f.flush()
                    try:
                        subprocess.run(['python', '-m', 'py_compile', f.name], check=True)
                        print(f'✅ Code block {i+1} is valid')
                    except subprocess.CalledProcessError:
                        print(f'❌ Code block {i+1} has syntax errors')
                        raise
        "

    - name: Validate example files
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        # Run all example files to ensure they work
        for example in examples/*.py; do
          echo "Validating $example..."
          python -m py_compile "$example"
          echo "✅ $example is valid"
        done

    - name: Test documentation code snippets
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        # Test that basic imports work as documented
        python -c "
        import vet_core
        print(f'vet-core version: {vet_core.__version__}')
        
        from vet_core.models import User, Pet, Appointment
        print('✅ Models imported successfully')
        
        from vet_core.database import get_session
        print('✅ Database utilities imported successfully')
        
        from vet_core.schemas import UserCreate, PetCreate
        print('✅ Schemas imported successfully')
        "

  check-api-docs:
    name: Check API Documentation Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install interrogate

    - name: Check docstring coverage
      run: |
        interrogate src/vet_core --verbose --ignore-init-method --ignore-magic --ignore-module --fail-under=80

    - name: Generate API documentation coverage report
      run: |
        interrogate src/vet_core --generate-badge docs/coverage.svg
        interrogate src/vet_core --output docs/api-coverage.txt

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: api-docs-coverage
        path: |
          docs/coverage.svg
          docs/api-coverage.txt