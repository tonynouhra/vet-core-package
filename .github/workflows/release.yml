name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
          # Check if version contains pre-release identifiers
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Is prerelease: $IS_PRERELEASE"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

    - name: Check if version exists in pyproject.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        if [[ "$VERSION" != "$CURRENT_VERSION" ]]; then
          echo "Version mismatch: tag=$VERSION, pyproject.toml=$CURRENT_VERSION"
          echo "Please update pyproject.toml version to match the release tag"
          exit 1
        fi

  test-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: [validate-release]
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_vet_core
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run full test suite
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        pytest -v --cov=vet_core --cov-report=xml

    - name: Run security checks
      run: |
        bandit -r src/
        # Try new safety scan command first, fallback to pip-audit if auth fails
        if ! safety scan 2>/dev/null; then
          echo "⚠️  Safety scan requires authentication, using pip-audit as fallback"
          pip install pip-audit
          pip-audit
        fi

  build-release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist
        path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build-release]
    if: needs.validate-release.outputs.is_prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/vet-core
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  test-testpypi-install:
    name: Test TestPyPI Installation
    runs-on: ubuntu-latest
    needs: [publish-testpypi, validate-release]
    if: needs.validate-release.outputs.is_prerelease == 'true'
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for package availability
      run: sleep 60

    - name: Install from TestPyPI
      run: |
        python -m pip install --upgrade pip
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ vet-core==${{ needs.validate-release.outputs.version }}

    - name: Test installation
      run: |
        python -c "import vet_core; print(f'vet-core version: {vet_core.__version__}')"
        python -c "from vet_core.models import User, Pet, Appointment; print('Models imported successfully')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-release, validate-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/vet-core
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-testpypi.result == 'success' || needs.validate-release.outputs.is_prerelease == 'false')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f "CHANGELOG.md" ]]; then
          # Try to extract the section for this version
          CHANGELOG_CONTENT=$(awk "/^## \[?$VERSION\]?/,/^## \[?[0-9]/ { if (/^## \[?[0-9]/ && !/^## \[?$VERSION\]?/) exit; print }" CHANGELOG.md | head -n -1)
          
          if [[ -z "$CHANGELOG_CONTENT" ]]; then
            CHANGELOG_CONTENT="Release $VERSION"
          fi
        else
          CHANGELOG_CONTENT="Release $VERSION"
        fi
        
        # Save changelog to file for multiline output
        echo "$CHANGELOG_CONTENT" > changelog.txt
        echo "changelog_file=changelog.txt" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: vet-core-${{ needs.validate-release.outputs.version }}-dist.zip
        asset_content_type: application/zip

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi, publish-testpypi, create-github-release]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-testpypi.result == 'success')
    steps:
    - name: Notify success
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
        
        if [[ "$IS_PRERELEASE" == "true" ]]; then
          echo "✅ Pre-release $VERSION published to TestPyPI successfully!"
          echo "📦 Install with: pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ vet-core==$VERSION"
        else
          echo "✅ Release $VERSION published to PyPI successfully!"
          echo "📦 Install with: pip install vet-core==$VERSION"
        fi