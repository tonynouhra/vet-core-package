name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  lint:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Black (formatting check)
      run: |
        black --check --diff src tests

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src tests

    - name: Run flake8 (linting)
      run: |
        flake8 src tests --statistics

    - name: Run mypy (type checking)
      run: |
        mypy src/vet_core

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep

    - name: Run Bandit (security linting)
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run Semgrep (static analysis)
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
        semgrep --config=auto src/

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-audit pipdeptree

    - name: Check for known vulnerabilities
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Generate dependency tree
      run: |
        pipdeptree --json > dependency-tree.json
        pipdeptree

    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json || true
        pip list --outdated

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-reports-${{ github.sha }}
        path: |
          pip-audit-report.json
          dependency-tree.json
          outdated-packages.json

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install pydocstyle doc8

    - name: Check docstring style
      run: |
        pydocstyle src/vet_core

    - name: Check documentation formatting
      run: |
        doc8 docs/ README.md CHANGELOG.md

    - name: Build documentation
      run: |
        cd docs && make html

    - name: Check for broken links in docs
      run: |
        cd docs && make linkcheck

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_vet_core
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark memory-profiler

    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        pytest tests/ -k "benchmark" --benchmark-json=benchmark-results.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results.json

  compatibility:
    name: Compatibility Check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run basic import tests
      run: |
        python -c "import vet_core; print('✅ Package imports successfully')"
        python -c "from vet_core.models import User, Pet, Appointment; print('✅ Models import successfully')"
        python -c "from vet_core.database import get_engine; print('✅ Database utilities import successfully')"
        python -c "from vet_core.schemas import UserCreate; print('✅ Schemas import successfully')"

    - name: Run unit tests (no database)
      run: |
        pytest tests/ -m "not database" -v

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_vet_core
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_vet_core
      run: |
        pytest --cov=vet_core --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=80

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          coverage.xml
          htmlcov/

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false