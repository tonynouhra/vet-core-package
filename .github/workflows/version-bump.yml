name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: 'patch'
      prerelease_type:
        description: 'Pre-release type (only for prerelease)'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
        default: 'alpha'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      old_version: ${{ steps.bump.outputs.old_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install packaging

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      id: bump
      run: |
        # Read current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Python script to handle version bumping
        cat > bump_version.py << 'EOF'
        import sys
        from packaging import version
        
        def bump_version(current_ver, bump_type, prerelease_type=None):
            v = version.parse(current_ver)
            
            if bump_type == "patch":
                if v.is_prerelease:
                    # Remove pre-release part for patch
                    new_ver = f"{v.major}.{v.minor}.{v.micro}"
                else:
                    new_ver = f"{v.major}.{v.minor}.{v.micro + 1}"
            elif bump_type == "minor":
                if v.is_prerelease:
                    new_ver = f"{v.major}.{v.minor}.{v.micro}"
                else:
                    new_ver = f"{v.major}.{v.minor + 1}.0"
            elif bump_type == "major":
                if v.is_prerelease:
                    new_ver = f"{v.major}.{v.minor}.{v.micro}"
                else:
                    new_ver = f"{v.major + 1}.0.0"
            elif bump_type == "prerelease":
                if v.is_prerelease:
                    # Increment pre-release number
                    pre_type = prerelease_type or "alpha"
                    if v.pre and v.pre[0] == pre_type:
                        new_ver = f"{v.major}.{v.minor}.{v.micro}-{pre_type}.{v.pre[1] + 1}"
                    else:
                        new_ver = f"{v.major}.{v.minor}.{v.micro}-{pre_type}.1"
                else:
                    # Add pre-release to current version
                    pre_type = prerelease_type or "alpha"
                    new_ver = f"{v.major}.{v.minor}.{v.micro + 1}-{pre_type}.1"
            
            return new_ver
        
        if __name__ == "__main__":
            current = sys.argv[1]
            bump_type = sys.argv[2]
            prerelease_type = sys.argv[3] if len(sys.argv) > 3 else None
            print(bump_version(current, bump_type, prerelease_type))
        EOF
        
        # Calculate new version
        NEW_VERSION=$(python bump_version.py "$CURRENT_VERSION" "${{ github.event.inputs.version_type }}" "${{ github.event.inputs.prerelease_type }}")
        echo "New version: $NEW_VERSION"
        
        # Update pyproject.toml
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Update __init__.py if it exists
        if [[ -f "src/vet_core/__init__.py" ]]; then
          if grep -q "__version__" src/vet_core/__init__.py; then
            sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" src/vet_core/__init__.py
          else
            echo "__version__ = \"$NEW_VERSION\"" >> src/vet_core/__init__.py
          fi
        fi
        
        # Set outputs
        echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update CHANGELOG
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        OLD_VERSION="${{ steps.bump.outputs.old_version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create changelog entry
        if [[ -f "CHANGELOG.md" ]]; then
          # Create temporary file with new entry
          cat > temp_changelog.md << EOF
        # Changelog
        
        All notable changes to this project will be documented in this file.
        
        ## [$NEW_VERSION] - $DATE
        
        ### Added
        - Version bump from $OLD_VERSION to $NEW_VERSION
        
        ### Changed
        
        ### Fixed
        
        ### Removed
        
        EOF
          
          # Append existing changelog (skip the header)
          tail -n +4 CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
        else
          # Create new changelog
          cat > CHANGELOG.md << EOF
        # Changelog
        
        All notable changes to this project will be documented in this file.
        
        ## [$NEW_VERSION] - $DATE
        
        ### Added
        - Initial version bump to $NEW_VERSION
        
        EOF
        fi

    - name: Commit changes
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        git add pyproject.toml CHANGELOG.md src/vet_core/__init__.py
        git commit -m "Bump version to $NEW_VERSION"
        git push origin main

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push origin "v$NEW_VERSION"

  trigger-release:
    name: Trigger Release Workflow
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
    - name: Trigger release workflow
      run: |
        NEW_VERSION="${{ needs.bump-version.outputs.new_version }}"
        echo "✅ Version bumped to $NEW_VERSION"
        echo "🏷️ Tag v$NEW_VERSION created and pushed"
        echo "🚀 Release workflow will be triggered automatically"
        
        # Check if it's a pre-release
        if [[ "$NEW_VERSION" =~ (alpha|beta|rc) ]]; then
          echo "📦 This is a pre-release - it will be published to TestPyPI"
        else
          echo "📦 This is a stable release - it will be published to PyPI"
        fi