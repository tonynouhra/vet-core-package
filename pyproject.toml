[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vet-core"
version = "0.1.0"
description = "Foundational Python package for veterinary clinic platform with shared data models and utilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Vet Clinic Platform Team", email = "dev@vetclinic.com"},
]
maintainers = [
    {name = "Vet Clinic Platform Team", email = "dev@vetclinic.com"},
]
keywords = [
    "veterinary",
    "clinic",
    "sqlalchemy",
    "pydantic",
    "database",
    "models",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.11"
dependencies = [
    # Core database and ORM
    "sqlalchemy[asyncio]>=2.0.0,<3.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    "aiosqlite>=0.19.0,<1.0.0",
    "alembic>=1.13.0,<2.0.0",
    
    # Data validation and serialization
    "pydantic[email]>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    
    # Utilities
    "python-dateutil>=2.8.0,<3.0.0",
    "pytz>=2023.3",
    
    # Configuration and environment
    "python-dotenv>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "faker>=20.0.0,<21.0.0",
    
    # Database testing
    "pytest-postgresql>=5.0.0,<6.0.0",
    "testcontainers[postgresql]>=3.7.0,<4.0.0",
    
    # Code quality
    "black>=24.3.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.7.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    
    # Security
    "bandit[toml]>=1.7.0,<2.0.0",
    "safety>=2.3.0,<3.0.0",
    "pip-audit>=2.6.0,<3.0.0",
    "setuptools>=78.1.1,<79.0.0",
    
    # Code quality metrics
    "radon>=6.0.0,<7.0.0",
    "xenon>=0.9.0,<1.0.0",
    "pipdeptree>=2.13.0,<3.0.0",
    
    # Documentation
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "sphinx-autodoc-typehints>=1.25.0,<2.0.0",
]
docs = [
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints>=1.25.0,<2.0.0",
    "interrogate>=1.5.0,<2.0.0",
    "pydocstyle>=6.3.0,<7.0.0",
    "doc8>=1.1.0,<2.0.0",
    "docutils",
]
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "faker>=20.0.0,<21.0.0",
    "pytest-postgresql>=5.0.0,<6.0.0",
    "testcontainers[postgresql]>=3.7.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/vetclinic/vet-core"
Documentation = "https://vet-core.readthedocs.io/"
Repository = "https://github.com/vetclinic/vet-core.git"
"Bug Tracker" = "https://github.com/vetclinic/vet-core/issues"
Changelog = "https://github.com/vetclinic/vet-core/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/vet_core"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/alembic",
    "/docs",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "pyproject.toml",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["vet_core"]
known_third_party = ["sqlalchemy", "pydantic", "alembic", "pytest"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "factory.*",
    "faker.*",
    "testcontainers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=vet_core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "database: Tests that require database",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/vet_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args for tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]